name: CD - Deploy to Development

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: ap-northeast-1
  NODE_VERSION: '20'

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'dev' }}
      url: ${{ steps.deploy.outputs.alb_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript build
        run: npm run build

      - name: Run unit tests
        run: npm run test:unit

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: CDK Bootstrap (if needed)
        run: |
          npx cdk bootstrap aws://unknown-account/${{ env.AWS_REGION }} || echo "Already bootstrapped"
        continue-on-error: true

      - name: CDK Deploy
        id: deploy
        run: |
          npx cdk deploy --require-approval never --outputs-file cdk-outputs.json
          
          # Extract ALB DNS name from outputs
          ALB_DNS=$(cat cdk-outputs.json | jq -r '.AlbNewfuncStack.ALBDnsName')
          echo "alb_url=http://${ALB_DNS}" >> $GITHUB_OUTPUT
          echo "alb_dns=${ALB_DNS}" >> $GITHUB_OUTPUT

      - name: Wait for deployment to be ready
        run: |
          echo "Waiting 60 seconds for instances to become healthy..."
          sleep 60

      - name: Run integration tests
        id: integration_test
        run: npm run test:integration
        continue-on-error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            cdk-outputs.json

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Deployment successful!"
          echo "ALB URL: ${{ steps.deploy.outputs.alb_url }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          exit 1

  integration-test:
    name: Integration Tests
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run integration tests
        run: npm run test:integration

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: coverage/
